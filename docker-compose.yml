version: "3"

services:
  tangent:
    # image: recrash/base:latest
    # Using a Dockerfile is optional, but included for completeness.
    build:
      context: .
      dockerfile: Dockerfile
      # [Optional] You can use build args to set options. e.g. 'VARIANT' below affects the image in the Dockerfile
      args:
        PYTHON_VERSION: "3.11"
        NODEJS_VERSION": "18"
        PNPM_VERSION: "8.5.1"
        BUN_VERSION": "0.6.2"
        POETRY_VERSION: "1.4.2"
    ports:
      - "3000:3000"
    volumes:
      # This is where VS Code should expect to find your project's source code and the value of "workspaceFolder" in .devcontainer/devcontainer.json
      - ..:/workspaces/tangent:cached

      # Uncomment the next line to use Docker from inside the container. See https://aka.ms/vscode-remote/samples/docker-from-docker-compose for details.
      # - /var/run/docker.sock:/var/run/docker.sock

    # Overrides default command so things don't shut down after the process ends.
    # command: bun run dev
    # command: /usr/bin/fish -c "poetry install && bun install && bun run dev"
    command: /bin/sh -c "while sleep 1000; do :; done"
    # command: /bin/sh -c "poetry install && bun install"
#   next:
#     container_name: next2
#     build:
#       context: ../modules/AgentGPT/next
#       dockerfile: Dockerfile
#     ports:
#       - "3002:3002"
#     environment:
#       NEXT_PUBLIC_API_BASE_URL: "http://localhost:8002"
#       OPENAI_API_KEY:
#     command: /bin/sh -c "npm install && npm run dev"

#   platform:
#     container_name: platform
#     build:
#       context: ../modules/AgentGPT/platform
#       target: prod
#     ports:
#       - "8002:8002"
#     restart: always
#     environment:
#       REWORKD_PLATFORM_HOST: 0.0.0.0
#       REWORKD_PLATFORM_DB_HOST: db
#       REWORKD_PLATFORM_DB_PORT: "3307"
#       REWORKD_PLATFORM_DB_USER: "reworkd_platform"
#       REWORKD_PLATFORM_DB_PASS: "reworkd_platform"
#       REWORKD_PLATFORM_DB_BASE: "reworkd_platform"
#     depends_on:
#       - db

#   db:
#     image: mysql:8.0
#     container_name: db2
#     restart: always
#     build:
#       context: ../modules/AgentGPT/db
#     ports:
#       - "3307:3307"
#     environment:
#       MYSQL_DATABASE: "reworkd_platform"
#       MYSQL_USER: "reworkd_platform"
#       MYSQL_PASSWORD: "reworkd_platform"
#       MYSQL_ROOT_PASSWORD: "reworkd_platform"
#       MYSQL_TCP_PORT: 3307
#     volumes:
#       - db_data:/var/lib/mysql
#     command:
#       [
#         "mysqld",
#         "--character-set-server=utf8mb4",
#         "--collation-server=utf8mb4_unicode_ci",
#       ]

#   weaviate:
#     image: semitechnologies/weaviate:1.19.6
#     restart: on-failure:0
#     ports:
#       - "8080:8080"
#     environment:
#       QUERY_DEFAULTS_LIMIT: 25
#       AUTHENTICATION_ANONYMOUS_ACCESS_ENABLED: "true"
#       PERSISTENCE_DATA_PATH: "/var/lib/weaviate"
#       DEFAULT_VECTORIZER_MODULE: "none"
#       CLUSTER_HOSTNAME: "node1"
#     volumes:
#       - weaviate:/var/lib/weaviate

#   backend:
#     volumes:
#       - "../modules/SuperAGI:/app"
#     build: ../modules/SuperAGI
#     ports:
#       - "8001:8001"
#     depends_on:
#       - super__redis
#       - super__postgres
#     networks:
#       - super_network

#   celery:
#     volumes:
#       - "../modules/SuperAGI:/app"
#     build:
#       context: ../modules/SuperAGI
#       dockerfile: DockerfileCelery
#     depends_on:
#       - super__redis
#       - super__postgres
#     networks:
#       - super_network

#   gui:
#     build: ../modules/SuperAGI/gui
#     ports:
#       - "3001:3001"
#     environment:
#       NEXT_PUBLIC_API_BASE_URL: http://localhost:8001
#       OPENAI_API_KEY: 
#     networks:
#       - super_network
#     command: /bin/sh -c "npm install && npm run dev"

#   super__redis:
#     image: "docker.io/library/redis:latest"
#     networks:
#       - super_network

#   super__postgres:
#     image: "docker.io/library/postgres:latest"
#     environment:
#       - POSTGRES_USER=superagi
#       - POSTGRES_PASSWORD=password
#       - POSTGRES_DB=super_agi_main
#     volumes:
#       - superagi_postgres_data:/var/lib/postgresql/data/
#     networks:
#       - super_network
#     ports:
#       - "5432:5432"

# networks:
#   super_network:
#     driver: bridge

# volumes:
#   superagi_postgres_data:
#   weaviate:
#   db_data:
# Runs app on the same network as the service container, allows "forwardPorts" in devcontainer.json function.
# network_mode: service:another-service

# Use "forwardPorts" in **devcontainer.json** to forward an app port locally.
# (Adding the "ports" property to this file will not forward from a Codespace.)

# Uncomment the next line to use a non-root user for all processes - See https://aka.ms/vscode-remote/containers/non-root for details.
# user: vscode

# Uncomment the next four lines if you will use a ptrace-based debugger like C++, Go, and Rust.
# cap_add:
#   - SYS_PTRACE
# security_opt:
#   - seccomp:unconfined

# You can include other services not opened by VS Code as well
# another-service:
#   image: mongo:latest
#   restart: unless-stopped

# As in the "app" service, use "forwardPorts" in **devcontainer.json** to forward an app port locally.
